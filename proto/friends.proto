/**
 * These are messages and services relating to a friend services, such as viewing, adding,
 * and removing friends, as well as generating friend recommendations for a user.
*/
syntax = "proto3";

package kic.friends;

option go_package = "./proto/friends;proto";

import "proto/common.proto";

/*
Request to get the user's friends.
 */
message GetFriendsForUserRequest {
  // Inform the client of information regarding the user.
  kic.common.User user = 1;
}

/*
Response to a request for getting the user's friends.
 */
message GetFriendsForUserResponse {
  // An array of all other users that the user is currently friends with.
  repeated uint64 friends = 1;
}

/*
Request to get friend recommendations for the user.
 */
message GetRecommendationsForUserRequest {
  // Inform the client of information regarding the user.
  kic.common.User user = 1;
  // How many recommendations the client would like to receive.
  int32 numberRecommendations = 2;
}

/*
Response to a request for getting friend recommendations for the user.
 */
message GetRecommendationsForUserResponse {
  // An array of users that will be recommended to the user.
  repeated kic.common.User recommendations = 1;
}

/*
These are errors used to inform the client that is requesting a connection what the issue is.
The variable names denote the issue.
*/
enum ConnectionError {
  // Two users are not friends.
  NO_FRIENDSHIP = 0;

  // The first user does not exist.
  USER_ONE_DNE = 1;

  // The second user does not exist.
  USER_TWO_DNE = 2;
}

/*
Update the connection between two users by modifying the connection value.
 */
message UpdateConnectionBetweenUsersRequest {
  // ID of the first user.
  uint64 firstUserID = 1;

  // ID of the second user.
  uint64 secondUserID = 2;

  // The new value for the connection between the first user
  // and second user.
  float updateValue = 3;
}

/*
Retrieve the connection between two users.
 */
message GetConnectionBetweenUsersRequest {
  // ID of the first user.
  uint64 firstUserID = 1;

  // ID of the second user.
  uint64 secondUserID = 2;
}

/*
Response to a request for fetching the connection between two users.
 */
message ConnectionBetweenUsersResponse {
  // An error in fetching the connection.
  ConnectionError error = 1;

  // Denotes the strength of the connection between two users.
  float connectionStrength = 2;
}

/*
Request for a connection between two users to be deleted.
 */
message DeleteConnectionBetweenUsersRequest {
  // ID of the first user.
  uint64 firstUserID = 1;

  // ID of the second user.
  uint64 secondUserID = 2;
}

/*
Response to a request for deleting a connection between two users.
 */
message DeleteConnectionBetweenUsersResponse {
  // An error in deleting the connection.
  ConnectionError error = 1;
}

/*
Request for two users to become friends.
 */
message CreateConnectionForUsersRequest {
  // ID of the first user.
  uint64 firstUserID = 1;

  // ID of the second user.
  uint64 secondUserID = 2;
}

message CreateConnectionForUsersResponse {
  // An error in creating the connection.
  ConnectionError error = 1;
}

/*
Service handling fetching and storing data about friends.
*/
service Friends {
  // Request a list of the IDs of all friends of a particular user.
  rpc GetFriendsForUser(GetFriendsForUserRequest) returns (GetFriendsForUserResponse);
  // Request information about the connection between two users, checking for existence and strength.
  rpc GetConnectionBetweenUsers(GetConnectionBetweenUsersRequest) returns (ConnectionBetweenUsersResponse);
  // Request a list of given size of users who might be friends of the requesting user.
  rpc GetRecommendationsForUser(GetRecommendationsForUserRequest) returns (GetRecommendationsForUserResponse);

  // Add two users as friends and create a connection between them.
  rpc CreateConnectionForUsers(CreateConnectionForUsersRequest) returns (CreateConnectionForUsersResponse);

  // Update a connection strength between two users.
  rpc UpdateConnectionBetweenUsers(UpdateConnectionBetweenUsersRequest) returns (ConnectionBetweenUsersResponse);

  // Delete the connection between two users.
  rpc DeleteConnectionBetweenUsers(DeleteConnectionBetweenUsersRequest) returns (DeleteConnectionBetweenUsersResponse);
}
