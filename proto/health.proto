/**
 * These are messages and services relating to mental health tracking data, allowing for
 * the logging of user mental health data and tracking the quality of their mental health state
 * from day to day.
*/
syntax = "proto3";

package kic.health;

option go_package = "./proto/health;proto";

import "proto/common.proto";
import "google/protobuf/timestamp.proto";



/*
Request from a user to get their mental health tracking data.
*/
message GetHealthDataForUserRequest {
  // The ID of the user in the user database, used globally for identification.
  int64 userID = 1;
}

/*
A message representing a single Mental Health Log entry.
*/
message MentalHealthLog {
  // Date of Mental Health Log Entry.
  kic.common.Date logDate = 1;
  // The score the user gave their current mood at the time of the log submittal.
  int32 score = 2;
  // Contains a journal entry from the user, allowing them to write about how they currently are feeling.
  string journalName = 3;
  // The ID of the user in the user database, used globally for identification.
  int64 userID = 4;
}

/*
Response when Mental Health Logs are requested for a given user, providing all applicable logs.
*/
message GetHealthDataForUserResponse {
  // Denotes the data that was requested by user from the Mental Health Log.
  repeated MentalHealthLog healthData = 1;
}

/*
Request for the Mental Health Log for a particular date.
*/
message GetHealthDataByDateRequest {
  // The ID of the user in the user database, used globally for identification.
  int64 userID = 1;
  // Date of Mental Health Log Entry
  kic.common.Date logDate = 2;
}

/*
Response containing the Mental Health Logs for a given date.
*/
message GetHealthDataByDateResponse {
  // List of all the Mental Health Log entries for the date requested.
  repeated MentalHealthLog healthData = 1;
}

/*
Request from a user to add their mental health data to the Mental Health Log.
*/
message AddHealthDataForUserRequest {
  // The ID of the user in the user database, used globally for identification.
  int64 userID = 1;
  // The MentalHealthLog being submitted for storage in the backend.
  MentalHealthLog newEntry = 2;
}

message AddHealthDataForUserResponse {
  bool success = 1;
}

/*
Request from a user to delete their mental health data from MentalHealthLog.
*/
message DeleteHealthDataForUserRequest {
  // The ID of the user in the user database, used globally for identification.
  int64 userID = 1;
  // Either delete all of data or delete specific date
  oneof data {
    // Denotes that all of the health data should be removed.
    bool all = 2;
    // Denotes the date of the mental health log data to remove.
    kic.common.Date dateToRemove = 3;
  }
}

/*
Response to a request to delete health data.
*/
message DeleteHealthDataForUserResponse {
  // Denotes the number of Mental Health Log entries that was successfully deleted for the user
  uint32 entriesDeleted = 1;
}

/*
Request from a user to update their mental health tracking data for a particular date.
*/
message UpdateHealthDataForDateRequest {
  // The ID of the user in the user database, used globally for identification.
  int64 userID = 1;
  // Denotes the log info that the user would like to update.
  MentalHealthLog desiredLogInfo = 2;
}

/*
Request from a user to update their mental health tracking data for a particular date.
*/
message UpdateHealthDataForDateResponse {
  // Denotes if the log entry was successfully updated
  bool success = 1;
}

/*
Request form a user to get a mental health score
 */
message GetMentalHealthScoreForUserRequest {
  // The ID of the user in the user database, used globally for identification.
  int64 userID = 1;
}

/*
Response to return a mental health score given a user ID
 */
message GetMentalHealthScoreForUserResponse {
  // The overall mental health score for the requested user.
  double score = 1;
}

/*
Interface provided by a service handling fetching and storing mental health tracking data about users.
*/
service HealthTracking {
  //Given health data obtained upon user request, said health data is returned to user.
  rpc GetHealthDataForUser(GetHealthDataForUserRequest) returns (GetHealthDataForUserResponse);
  //Health data requested to be added by user is added, and error is returned if appropriate.
  rpc AddHealthDataForUser(AddHealthDataForUserRequest) returns (AddHealthDataForUserResponse);
  //Health data requested by user to be deleted is deleted and said deleted entries are returned to user.
  rpc DeleteHealthDataForUser(DeleteHealthDataForUserRequest) returns (DeleteHealthDataForUserResponse);
  //Health data requested to be updated by user is updated, and error is returned if appropriate.
  rpc UpdateHealthDataForDate(UpdateHealthDataForDateRequest) returns (UpdateHealthDataForDateResponse);
  // Given user ID, returns a mental health score for a user
  rpc GetMentalHealthScoreForUser(GetMentalHealthScoreForUserRequest) returns (GetMentalHealthScoreForUserResponse);
  // Given a date and user ID, return health data log for a specific date
  rpc GetHealthDataByDate(GetHealthDataByDateRequest) returns (GetHealthDataByDateResponse);
}