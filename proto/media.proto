/**
 * These are messages and services relating to a storing media, such as uploading and downloading files.
*/
syntax = "proto3";

package kic.media;

option go_package = "./proto/media;proto";

import "proto/common.proto";

// enum for update/overwrite flag
enum UpdateFlag {
  OVERWRITE = 0;
  APPEND = 1;
}

/*
Request to upload file for user.
 */
message UploadFileRequest {
  kic.common.File fileInfo = 1;
  string fileURI = 2;
}

/*
Response to user requesting file upload.
 */
message UploadFileResponse {
  //Id of file being uploaded
  string fileID = 1;
  //Size of file in bytes
  uint64 bytesRead = 2;
}

/*
Request to check for file for user.
 */
message CheckForFileRequest {
   //Information of file to be checked
  kic.common.File fileInfo = 1;
}

/*
Response to check for file for user.
 */
message CheckForFileResponse {
  //Returns true if file is found to exist
  bool exists = 1;
}

/*
Request to download file for user
 */
message DownloadFileRequest {
//Information of file to be downloaded
  kic.common.File fileInfo = 1;
}

/*
Response to download file for user
 */
message DownloadFileResponse {
    string chunk = 1;
}

// Flags sent with a get file by metadata request to tell the server how seriously it wants the metadata request
// to be conformed to
enum MetadataStrictness {
  // Only include a given file if all key value pairs match
  STRICT = 0;
  // Include a file if it matches any of the key value pairs
  CASUAL = 1;
  // Only include a file if it fails to match all key value pairs
  STRICTLY_OPPOSITE = 2;
  // Only include a file if it matches less than all key value pairs
  CASUALLY_OPPOSITE = 3;
}

/*
Request to get files for user by metadata request
 */
message GetFilesByMetadataRequest {
  //Map of desired metadata
  map<string, string> desiredMetadata = 1;
  // Flags sent with a get file by metadata request to tell the server how seriously it wants the metadata request
  // to be conformed to
  MetadataStrictness strictness = 2;
}

/*
Response to get files for user by metadata request
 */
message GetFilesByMetadataResponse {
  //Information of file to be downloaded
  repeated kic.common.File fileInfos = 1;
}

/*
Request to delete file for user with metadata request
 */
message DeleteFilesWithMetaDataRequest {
  //Map of desired metadata of file to be deleted
  map<string, string> metadata = 1;
  // Flags sent to tell the server how seriously it wants the metadata request
  // to be conformed to
  MetadataStrictness strictness = 2;
}

/*
Response to  delete file for user with metadata request
 */
message DeleteFilesWithMetaDataResponse {
  bool success = 1;
}

message UpdateFilesWithMetadataRequest {
  //Map of desired metadata of file to be deleted
  map<string, string> desiredMetadata = 1;
  map<string, string> filterMetadata = 2;
  // Flags sent to tell the server how seriously it wants the metadata request
  // to be conformed to
  MetadataStrictness strictness = 3;

  // indicates if the metadata should be overwritten or appended
  UpdateFlag updateFlag = 4;
}

message UpdateFilesWithMetadataResponse {
  int64 numFilesUpdated = 1;
}


/*
Service handling fetching and storing data about files.
*/
service MediaStorage {
  /*
   Send a file as a stream of messages, starting with a message containing a File message, then
   followed by an arbitrary number of messages containing bytes representing the file. The response
   will then confirm the number of bytes received or provide an error.
   */
  rpc UploadFile(UploadFileRequest) returns (UploadFileResponse);

  /*
  Using the same format as above, the service allows the client to retrieve a stored file.
   */
  rpc DownloadFileByName(DownloadFileRequest) returns (stream DownloadFileResponse);

  // Check for the existence of a file by filename
  rpc CheckForFileByName(CheckForFileRequest) returns (CheckForFileResponse);

  rpc UpdateFilesWithMetadata(UpdateFilesWithMetadataRequest) returns (UpdateFilesWithMetadataResponse);

  /*
  Allows for the requesting of files with specific key value pairs as metadata. The strictness can be set
  such that for example only perfect matches will be returned.
   */
  rpc GetFilesWithMetadata(GetFilesByMetadataRequest) returns (GetFilesByMetadataResponse);

  /*
  Using the same strictness settings as the above, delete particular files with certain metadata.
   */
  rpc DeleteFilesWithMetaData(DeleteFilesWithMetaDataRequest) returns (DeleteFilesWithMetaDataResponse);
}