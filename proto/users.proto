/**
 * These are messages and services relating to users and user authentication.
 * Some of the data models that will be used in the end products will be supplied from
 * the Envoy project, specifically those found here for external authentication
 * services: https://github.com/envoyproxy/envoy/blob/main/api/envoy/service/auth/v3/external_auth.proto
 * We will implement the server side logic for the service they define, allowing Istio to
 * send gRPC requests to our authentication server.
*/
syntax = "proto3";

package kic.users;

option go_package = "./proto/users;proto";

import "proto/common.proto";

/*
Request for a user to be added to the user database.
*/
message AddUserRequest {
  // The email of the user, must be unique.
  string email = 1;
  // The username of the user, must also be unique.
  string desiredUsername = 2;
  // The password the user would like stored
  string desiredPassword = 3;
  // User's birthday in MM/DD/YYYY format.
  kic.common.Date birthday = 4;
  // User's city location.
  string city = 5;
}

/*
Response to a request for adding a user to the database.
*/
message AddUserResponse {
  // Denotes if the user was properly created.
  bool success = 1;
  // Inform the client of the information assigned to the user should they be accepted.
  kic.common.User createdUser = 2;
}

/*
Request for obtaining user data from username
 */
message GetUserByUsernameRequest {
  // username sent in request
  string username = 1;
}

/*
Response to a request for obtaining user data from a username
 */
message GetUserByUsernameResponse {
  // denotes if the user was successfully found
  bool success = 1;
  // User returned in response
  kic.common.User user = 2;
}

/*
Request for obtaining userdata from id
 */
message GetUserByIDRequest {
  // User ID sent in request
  int64 userID = 1;
}

/*
Response to a request for obtaining user data from user id
 */
message GetUserByIDResponse {
  // denotes if the user was successfully found
  bool success = 1;
  // User returned in response
  kic.common.User user = 2;
}

/*
Request for obtaining username from user id
 */
message GetUserNameByIDRequest {
  // User ID sent in request
  int64 userID = 1;
}

/*
Response to a request for obtaining username from user id
 */
message GetUserNameByIDResponse {
  // Username associated with the given user id
  string username = 1;
}

/*
Request to delete a user with a given user id
 */
message DeleteUserByIDRequest {
  // User ID sent in request
  int64 userID = 1;
}

/*
Response to a request to delete a user with a given user id
 */
message DeleteUserByIDResponse {
  // Denotes if the user was successfully deleted.
  bool success = 1;
}

/*
Request to update a user's information with the information provided. Only non-null fields will be updated,
and the userID is not mutable.
 */
message UpdateUserInfoRequest {
  // Only required item is the UserID which is used to identify what entry to update,
  // all other non null fields will be used to update the proper column in the database
  int64 userID = 1;
  // The email of the user, must be unique.
  string email = 2;
  // The username of the user, must also be unique.
  string desiredUsername = 3;
  // The password the user would like stored.
  string desiredPassword = 4;
  // User's birthday in MM/DD/YYYY format.
  kic.common.Date birthday = 5;
  // User's city location.
  string city = 6;
  // The new bio that the user would like displayed.
  string bio = 7;
  // Trigger tags that the user would like to avoid
  string triggers = 8;
  // Denotes if the user is private or public
  bool isPrivate = 9;
}

/*
Response to a request to update a user's information with the information provided
 */
message UpdateUserInfoResponse {
  // Denotes if the user was properly updated.
  bool success = 1;
  // Inform the client of the information assigned to the user.
  kic.common.User updatedUser = 2;
}

/*
A Request to the server to return a JWT token to authenticate the remainder of the session with the given user.
*/
message GetJWTTokenRequest {
  // Requesting user's username
  string username = 1;
  // Requesting user's password
  string password = 2;
}

/*
The server response to a client request for a JWT, providing the token.
*/
message GetJWTTokenResponse {
  // Return the token as a string should the client send proper credentials
  string token = 1;
}

/*
Interface provided by a service handling fetching and storing data about users.
*/
service Users {
  // Authenticate the client session and return a JWT that can be utilized for all further contact requiring
  // authentication
  rpc GetJWTToken(GetJWTTokenRequest) returns (GetJWTTokenResponse) ;

  // Add a new user to the database.
  rpc AddUser(AddUserRequest) returns (AddUserResponse);

  // Request user information from a username.
  rpc GetUserByUsername(GetUserByUsernameRequest) returns (GetUserByUsernameResponse);
  // Request user information from a User ID.
  rpc GetUserByID(GetUserByIDRequest) returns (GetUserByIDResponse);
  // Request only a username from a User ID.
  rpc GetUserNameByID(GetUserNameByIDRequest) returns (GetUserNameByIDResponse);

  // Delete the user with the given ID, this will need to cascade to other services.
  rpc DeleteUserByID(DeleteUserByIDRequest) returns (DeleteUserByIDResponse);

  // Update a user's information to that sent by the client.
  rpc UpdateUserInfo(UpdateUserInfoRequest) returns (UpdateUserInfoResponse);
}